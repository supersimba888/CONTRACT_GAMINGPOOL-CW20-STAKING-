{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "admin_wallet",
    "fury_token_contract",
    "vesting"
  ],
  "properties": {
    "admin_wallet": {
      "description": "Wallet with Administrator privileges",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "fury_token_contract": {
      "description": "Fury Token Contract Address",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "vesting": {
      "description": "Array of Vesting schedules for various categories",
      "allOf": [
        {
          "$ref": "#/definitions/InstantiateVestingSchedulesInfo"
        }
      ]
    }
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "InstantiateVestingSchedulesInfo": {
      "type": "object",
      "required": [
        "vesting_schedules"
      ],
      "properties": {
        "vesting_schedules": {
          "description": "Array of individual vesting schedules applicable to some category",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VestingSchedule"
          }
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "VestingSchedule": {
      "type": "object",
      "required": [
        "address",
        "cliff_period",
        "initial_vesting_count",
        "should_transfer",
        "total_vesting_token_count",
        "vesting_count_per_period",
        "vesting_periodicity"
      ],
      "properties": {
        "address": {
          "description": "Wallet address of the account.",
          "type": "string"
        },
        "cliff_period": {
          "description": "Cliff period in weeks",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "initial_vesting_count": {
          "description": "Amount of tokens allocated at the start of vesting.",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "parent_category_address": {
          "description": "Address of the parent category to which this account is investing into",
          "type": [
            "string",
            "null"
          ]
        },
        "should_transfer": {
          "description": "Flag to let system know if the vested amount has to be transferred immediately Or should be kept in allowances for the vester to claim",
          "type": "boolean"
        },
        "total_vesting_token_count": {
          "description": "Total tokens to be awarded to the address",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "vesting_count_per_period": {
          "description": "Amount of tokens to be awarded in every vesting cycle",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "vesting_periodicity": {
          "description": "How often the vesting should occur. This is expressed in seconds",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    }
  }
}
